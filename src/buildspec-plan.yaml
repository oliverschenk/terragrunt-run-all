version: 0.2

env:
  shell: bash

  variables:
    TERRAFORM_VERSION: "1.4.2"
    TERRAGRUNT_VERSION: "0.45.0"

  exported-variables:
    - BuildID
    - BuildTag

phases:
  install:

    commands:
      - echo Entered the install phase...

      # install terraform binary
      - echo Installing Terraform
      - curl -s -qL -o terraform_install.zip https://releases.hashicorp.com/terraform/${TERRAFORM_VERSION}/terraform_${TERRAFORM_VERSION}_linux_amd64.zip
      - unzip terraform_install.zip && mv terraform /usr/bin
      - rm terraform_install.zip

      # install terragrunt binary
      - echo Installing Terragrunt
      - curl -Lo terragrunt https://github.com/gruntwork-io/terragrunt/releases/download/v${TERRAGRUNT_VERSION}/terragrunt_linux_amd64
      - chmod +x terragrunt
      - mv terragrunt /usr/bin

    finally:
      # output versions
      - terraform --version
      - terragrunt --version

  build:
    commands:

      # Go to accounts folder
      - cd $CODEBUILD_SRC_DIR/src/infrastructure

      # Find all Terragrunt modules to destroy
      - tg_modules_to_destroy=$(find . -maxdepth 4 -name terragrunt.hcl -execdir [ -e .destroy ] \; -printf " --terragrunt-include-dir %h")
      
      # Plan to destroy modules no longer needed
      - |
        if [[ -n "${tg_modules_to_destroy}" ]]; then
          terragrunt run-all plan $tg_modules_to_destroy -destroy -no-color
        fi
      
      # Find all Terragrunt modules that do not contain a .destroy file
      - tg_modules=$(find . -maxdepth 4 -name terragrunt.hcl -execdir [ ! -e .destroy ] \; -printf " --terragrunt-include-dir %h")

      # Plan all changes
      - |
        if [[ -n "${tg_modules}" ]]; then
          terragrunt run-all plan $tg_modules -no-color
        fi

      - "export BuildID=`echo $CODEBUILD_BUILD_ID | cut -d: -f1`"
      - "export BuildTag=`echo $CODEBUILD_BUILD_ID | cut -d: -f2`"   
          
artifacts:
  files:
    - "**/*"
  exclude-paths: 
    - "**/.terragrunt-cache/**/*"
